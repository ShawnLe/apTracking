/*!
  \file vpPointsTracker.cpp
  \brief Contains abstract elements for a Distance to Feature type feature.
*/

#include "vpPointsTracker.h"
#include <visp/vpDisplay.h>
#include <visp/vpColor.h>

#include <visp/vpTrackingException.h>
#include <visp/vpDebug.h>

#define DEBUG_LEVEL1 0
#define DEBUG_LEVEL2 0
#define DEBUG_LEVEL3 0




void
vpPointsTracker::init()
{
  if (DEBUG_LEVEL1)
    std::cout << "begin vpPointsTracker::init() " <<  std::endl ;

  vpTracker::init()  ;
  p.resize(2) ;
  selectDisplay = vpPointSite::NONE ;

  if (DEBUG_LEVEL1)
    std::cout << "end vpPointsTracker::init() " <<  std::endl ;
}

vpPointsTracker::vpPointsTracker()
{
  if (DEBUG_LEVEL1)
    std::cout << "begin vpPointsTracker::vpPointsTracker() " <<  std::endl ;

  init();
  me = NULL ;
  display_point = false ;
  nGoodElement = 0;
  query_range = 0;
  seuil = 0;
  init_range = 1;
  candidates.resize(1);

  if (DEBUG_LEVEL1)
    std::cout << "end vpPointsTracker::vpPointsTracker() " << std::endl ;
}

vpPointsTracker::vpPointsTracker(const vpPointsTracker& meTracker):vpTracker(meTracker)
{
  if (DEBUG_LEVEL1)
    std::cout << "begin vpPointsTracker::vpPointsTracker() " <<  std::endl ;

  init();
  
  me = meTracker.me;
  list = meTracker.list;
  nGoodElement = meTracker.nGoodElement;
  query_range = meTracker.query_range;
  init_range = meTracker.init_range;
  seuil = meTracker.seuil;
  display_point = meTracker.display_point;
  selectDisplay = meTracker.selectDisplay;
}

vpPointsTracker::~vpPointsTracker()
{
  if (DEBUG_LEVEL1) std::cout << "begin vpPointsTracker::~vpPointsTracker() " << std::endl ;

  if(!(list.empty()))
    list.kill();

  if (DEBUG_LEVEL1) std::cout << "end vpPointsTracker::~vpPointsTracker() " << std::endl ;
}

vpPointsTracker&
vpPointsTracker::operator = (vpPointsTracker& p)
{
  if (DEBUG_LEVEL1) std::cout << "begin vpPointsTracker::operator=" << std::endl ;

  list = p.list;
  me = p.me;
  selectDisplay = p.selectDisplay ;

  if (DEBUG_LEVEL1) std::cout << "end vpPointsTracker::operator=" << std::endl ;
  return *this;
}

int
vpPointsTracker::numberOfSignal()
{
  int number_signal=0;

  // Loop through all the points tracked from the contour
  list.front();
  while(!list.outside())
  {
    vpPointSite P = list.value();
    if(P.suppress == 0) number_signal++;
    list.next();
  }

  return number_signal;
}

int
vpPointsTracker::totalNumberOfSignal()
{
  return list.nbElement();

}

int
vpPointsTracker::outOfImage(int i, int j, int half, int rows, int cols)
{
  return (! ((i> half+2) &&
	     (i< rows -(half+2)) &&
	     (j>half+2) &&
	     (j<cols-(half+2)))
	  ) ;
}

int
vpPointsTracker::outOfImage(vpImagePoint iP, int half, int rows, int cols)
{
  int i = vpMath::round(iP.get_i());
  int j = vpMath::round(iP.get_j());
  return (! ((i> half+2) &&
	     (i< rows -(half+2)) &&
	     (j>half+2) &&
	     (j<cols-(half+2)))
	  ) ;
}


//! Virtual function that is called by lower classes vpPointsTrackerLine/Circle/Cylinder
void
vpPointsTracker::initTracking(const vpImage<unsigned char>& I)
{
  if (DEBUG_LEVEL1)
    std::cout << "begin vpPointsTracker::initTracking() " << std::endl ;


  // Must set range to 0
  int range_tmp = me->range;
  me->range=init_range;

  nGoodElement=0;

  int d = 0;
  vpImagePoint ip1, ip2;
  
  // Loop through list of sites to track
  list.front();
  while(!list.outside())
  {
    vpPointSite refp = list.value() ;//current reference pixel

    d++ ;
    // If element hasn't been suppressed
    if(refp.suppress==0)
    {
      try {
		refp.track(I,me,false);
      }
      catch(...)
      {
		// EM verifier quel signal est de sortie !!!
		vpERROR_TRACE("Error caught") ;
		throw ;
      }
      if(refp.suppress==0) nGoodElement++;
    }


    if(DEBUG_LEVEL2)
    {
      double a,b ;
      a = refp.i_1 - refp.i ;
      b = refp.j_1 - refp.j ;
      if(refp.suppress==0) {
		ip1.set_i( refp.i );
		ip1.set_j( refp.j );
		ip2.set_i( refp.i+a );
		ip2.set_j( refp.j+b );
		//vpDisplay::displayArrow(I, ip1, ip2, vpColor::green) ;
      }
    }

    list.modify(refp) ;
    list.next() ;
  }

  /*
  if (res != OK)
  {
    std::cout<< "In vpPointsTracker::initTracking(): " ;
    switch (res)
    {
    case  ERR_TRACKING:
      std::cout << "vpPointsTracker::initTracking:Track return ERR_TRACKING " << std::endl ;
      break ;
    case fatalError:
      std::cout << "vpPointsTracker::initTracking:Track return fatalError" << std::endl ;
      break ;
    default:
      std::cout << "vpPointsTracker::initTracking:Track return error " << res << std::endl ;
    }
    return res ;
  }
  */

  me->range=range_tmp;


  if (DEBUG_LEVEL1)
  std::cout << "end vpPointsTracker::initTracking() " << std::endl ;

}


void
vpPointsTracker::track(const vpImage<unsigned char>& I, const vpImage<unsigned char>& Iprec)
{
  if (DEBUG_LEVEL1)
    std::cout << "begin  vpPointsTracker::Track():" << std::endl ;

  if (list.nbElement()==0)
  {
    if (DEBUG_LEVEL1)
    vpERROR_TRACE("Error Tracking: only %d "
		 "pixels when entered the function ",list.nbElement()) ;
    throw(vpTrackingException(vpTrackingException::notEnoughPointError,
			      "too few pixel to track")) ;

  }

  vpImagePoint ip1, ip2;
  nGoodElement=0;
  //  int d =0;
  // Loop through list of sites to track
  list.front();
  while(!list.outside())
  {
    vpPointSite s = list.value() ;//current reference pixel

    //    d++ ;
    // If element hasn't been suppressed
    if(s.suppress==0)
    {

      try{
	//	vpERROR_TRACE("%d",d ) ;
	//	vpERROR_TRACE("range %d",me->range) ;
    	  if (s.convlt==0)
    	  {
	 s.track(I,me,false);
    		  //s.track2(I,Iprec,me,false);
    	  }
    	  else
    	  {
    			 s.track(I,me,false);
    		  //s.track2(I,Iprec,me,false);
    			 //std::cout<<" ok1"<<std::endl;
    	  }
	 //std::cout<< " sj "<<s.j <<" si "<<s.i <<std::endl;

	  double a,b ;
	  a = s.i_1 - s.i ;
	  b = s.j_1 - s.j ;
	  if(s.suppress==0) {
	    ip1.set_i( s.i_1 );
	    ip1.set_j( s.j_1 );
	    //ip2.set_i( s.i_1-a*5 );
	    //ip2.set_j( s.j_1-b*5 );
	    ip2.set_i( s.i);
	    ip2.set_j( s.j);
	    //vpDisplay::displayArrow(I, ip1, ip2, vpColor::red,1) ;
	    //vpDisplay::displayCross(I, ip1,2, vpColor::red, 2) ;
	    //vpDisplay::displayCross(I, ip2,2, vpColor::white, 2) ;
	  }



      }
      catch(vpTrackingException)
      {
	vpERROR_TRACE("catch exception ") ;
	s.suppress=2 ;
      }

      if(s.suppress != 2)
      {
	nGoodElement++;

	if(DEBUG_LEVEL2)
	{
	  /*double a,b ;
	  a = s.i_1 - s.i ;
	  b = s.j_1 - s.j ;
	  if(s.suppress==0) {
	    ip1.set_i( s.i );
	    ip1.set_j( s.j );
	    ip2.set_i( s.i+a*5 );
	    ip2.set_j( s.j+b*5 );
	    vpDisplay::displayArrow(I, ip1, ip2, vpColor::green) ;
	  }*/
	}

      }
      list.modify(s) ;
    }
    list.next() ;

  }

  if (DEBUG_LEVEL1)
    std::cout << "end  vpPointsTracker::Track()" <<nGoodElement << std::endl ;

}


void
vpPointsTracker::trackMH(const vpImage<unsigned char>& I, const vpImage<unsigned char>& Iprec)
{
  if (DEBUG_LEVEL1)
    std::cout << "begin  vpPointsTracker::Track():" << std::endl ;

  if (list.nbElement()==0)
  {
    if (DEBUG_LEVEL1)
    vpERROR_TRACE("Error Tracking: only %d "
		 "pixels when entered the function ",list.nbElement()) ;
    throw(vpTrackingException(vpTrackingException::notEnoughPointError,
			      "too few pixel to track")) ;

  }

  vpImagePoint ip1, ip2;
  nGoodElement=0;
  //  int d =0;
  // Loop through list of sites to track
  list.front();
  while(!list.outside())
  {
    vpPointSite s = list.value() ;//current reference pixel

    //    d++ ;
    // If element hasn't been suppressed
    if(s.suppress==0)
    {

      try{
	//	vpERROR_TRACE("%d",d ) ;
	//	vpERROR_TRACE("range %d",me->range) ;
    	  if (s.convlt==0)
    	  {
	 s.trackMH(I,me,false);
    		  //s.track2(I,Iprec,me,false);
	 //std::cout << " suppress " << s.suppress << std::endl;

    	  }
    	  else
    	  {
    			 s.trackMH(I,me,false);
    		  //s.track2(I,Iprec,me,false);
    			 //std::cout<<" ok1"<<std::endl;
    	  }
	 //std::cout<< " sj "<<s.j <<" si "<<s.i <<std::endl;
	  double a,b ;
	  a = s.i_1 - s.i ;
	  b = s.j_1 - s.j ;
	  if(s.suppress==0) {
	    ip1.set_i( s.i_1 );
	    ip1.set_j( s.j_1 );
	    //ip2.set_i( s.i_1-a*5 );
	    //ip2.set_j( s.j_1-b*5 );
	    ip2.set_i( s.i);
	    ip2.set_j( s.j);
//        vpDisplay::displayArrow(I, ip1, ip2, vpColor::green,1) ;
	    //vpDisplay::displayCross(I, ip1,2, vpColor::green, 2) ;
	    //vpDisplay::displayCross(I, ip2,2, vpColor::white, 2) ;
	  }



      }
      catch(vpTrackingException)
      {
	vpERROR_TRACE("catch exception ") ;
	s.suppress=2 ;
      }

      if(s.suppress != 2)
      {
	nGoodElement++;

	if(DEBUG_LEVEL2)
	{
	  /*double a,b ;
	  a = s.i_1 - s.i ;
	  b = s.j_1 - s.j ;
	  if(s.suppress==0) {
	    ip1.set_i( s.i );
	    ip1.set_j( s.j );
	    ip2.set_i( s.i+a*5 );
	    ip2.set_j( s.j+b*5 );
	    vpDisplay::displayArrow(I, ip1, ip2, vpColor::green) ;
	  }*/
	}

      }
      for (int m=0; m<s.getNumCandidates();m++)
      {
      candidates.push_back(s.candidateList[m]);
      }
      //std::cout<< " suppress " << s.suppress<<std::endl;
      list.modify(s);
    }
    list.next() ;

  }

  list.front();
       while(!list.outside())
         {
       vpPointSite s1 = candidates[2];
       //std::vector<vpPointSite> list0 = s1.candidateVect;
       //vpPointSite s0 = s1.candidateList[0];
       //std::cout << (int)s1.i << std::endl;
       list.next();
         }

  if (DEBUG_LEVEL1)
    std::cout << "end  vpPointsTracker::Track()" <<nGoodElement << std::endl ;

}



void
vpPointsTracker::trackPred(const vpImage<unsigned char>& I, const vpImage<unsigned char>& Iprec)
{
  if (DEBUG_LEVEL1)
    std::cout << "begin  vpPointsTracker::Track():" << std::endl ;

  if (list.nbElement()==0)
  {
    if (DEBUG_LEVEL1)
    vpERROR_TRACE("Error Tracking: only %d "
		 "pixels when entered the function ",list.nbElement()) ;
    throw(vpTrackingException(vpTrackingException::notEnoughPointError,
			      "too few pixel to track")) ;

  }

  vpImagePoint ip1, ip2;
  nGoodElement=0;
  //  int d =0;
  // Loop through list of sites to track
  list.front();
  while(!list.outside())
  {
    vpPointSite s = list.value() ;//current reference pixel

    //    d++ ;
    // If element hasn't been suppressed
    if(s.suppress==0)
    {

      try{
	//	vpERROR_TRACE("%d",d ) ;
	//	vpERROR_TRACE("range %d",me->range) ;
    	  if (s.convlt==0)
    	  {
	 //s.track(I,me,false);
    		  s.track2(I,Iprec,me,false);
    	  }
    	  else
    	  {
    			// s.track(I,me,false);
    		  s.track2(I,Iprec,me,false);
    			 //std::cout<<" ok1"<<std::endl;
    	  }
	 //std::cout<< " sj "<<s.j <<" si "<<s.i <<std::endl;

	  double a,b ;
	  a = s.i_1 - s.i ;
	  b = s.j_1 - s.j ;
	  if(s.suppress==0) {
	    ip1.set_i( s.i_1 );
	    ip1.set_j( s.j_1 );
	    //ip2.set_i( s.i_1-a*5 );
	    //ip2.set_j( s.j_1-b*5 );
	    ip2.set_i( s.i);
	    ip2.set_j( s.j);
	    //vpDisplay::displayArrow(I, ip1, ip2, vpColor::green,1) ;
	    //vpDisplay::displayCross(I, ip1,2, vpColor::green, 2) ;
	    //vpDisplay::displayCross(I, ip2,2, vpColor::white, 2) ;
	  }



      }
      catch(vpTrackingException)
      {
	vpERROR_TRACE("catch exception ") ;
	s.suppress=2 ;
      }

      if(s.suppress != 2)
      {
	nGoodElement++;

	if(DEBUG_LEVEL2)
	{
	  /*double a,b ;
	  a = s.i_1 - s.i ;
	  b = s.j_1 - s.j ;
	  if(s.suppress==0) {
	    ip1.set_i( s.i );
	    ip1.set_j( s.j );
	    ip2.set_i( s.i+a*5 );
	    ip2.set_j( s.j+b*5 );
	    vpDisplay::displayArrow(I, ip1, ip2, vpColor::green) ;
	  }*/
	}

      }
      list.modify(s) ;
    }
    list.next() ;

  }

  if (DEBUG_LEVEL1)
    std::cout << "end  vpPointsTracker::Track()" <<nGoodElement << std::endl ;

}


void
vpPointsTracker::display(const vpImage<unsigned char>& I)
{
  if (DEBUG_LEVEL1)
  {
    std::cout <<"begin vpPointsTracker::displayList() " << std::endl ;
    std::cout<<" There are "<<list.nbElement()<< " sites in the list " << std::endl ;
  }
  vpImagePoint ip;

  list.front();

  while (!list.outside())
  {
    vpPointSite p = list.value() ;

    if(p.suppress == 1) {
      ip.set_i( p.i );
      ip.set_j( p.j);
      vpDisplay::displayCross(I, ip, 2, vpColor::white) ; // Contrast
    }
    else if(p.suppress == 2) {
      ip.set_i( p.i );
      ip.set_j( p.j);
      vpDisplay::displayCross(I, ip, 2,vpColor::blue) ; // Threshold
    }
    else if(p.suppress == 3) {
      ip.set_i( p.i );
      ip.set_j( p.j);
      vpDisplay::displayCross(I, ip, 3, vpColor::green) ; // M-estimator
    }
    else if(p.suppress == 0) {
      ip.set_i( p.i );
      ip.set_j( p.j);
      vpDisplay::displayCross(I, ip, 2, vpColor::red) ; // OK
    }

    list.next() ;
  }

  list.front() ;

  if (DEBUG_LEVEL1)
  {
    std::cout <<"end vpPointsTracker::displayList() " << std::endl ;
  }
}


void
vpPointsTracker::display(const vpImage<unsigned char>& I,vpColVector &w,int &index_w)
{

  list.front();
  while(!list.outside())
  {
    vpPointSite P = list.value();

    if(P.suppress == 0)
    {
      P.weight = w[index_w];
      index_w++;
    }

    list.modify(P) ;
    list.next();

  }
  display(I);
}

#undef DEBUG_LEVEL1
#undef DEBUG_LEVEL2
#undef DEBUG_LEVEL3

